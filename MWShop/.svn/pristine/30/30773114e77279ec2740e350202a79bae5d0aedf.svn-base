package com.etc.service;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alipay.api.AlipayResponse;
import com.alipay.api.response.AlipayTradePrecreateResponse;
import com.alipay.demo.trade.config.Configs;
import com.alipay.demo.trade.model.ExtendParams;
import com.alipay.demo.trade.model.GoodsDetail;
import com.alipay.demo.trade.model.builder.AlipayTradePrecreateRequestBuilder;
import com.alipay.demo.trade.model.result.AlipayF2FPrecreateResult;
import com.alipay.demo.trade.service.AlipayTradeService;
import com.alipay.demo.trade.service.impl.AlipayTradeServiceImpl;
import com.alipay.demo.trade.utils.ZxingUtils;
import com.etc.bean.Orderitem;
import com.etc.bean.Orders;
import com.etc.dao.OrderitemMapper;
import com.etc.dao.OrdersMapper;

@Service
public class OrderService {
	
	private static  AlipayTradeService tradeService;
    static {

        /** 一定要在创建AlipayTradeService之前调用Configs.init()设置默认参数
         *  Configs会读取classpath下的zfbinfo.properties文件配置信息，如果找不到该文件则确认该文件是否在classpath目录
         */
        Configs.init("zfbinfo.properties");

        /** 使用Configs提供的默认参数
         *  AlipayTradeService可以使用单例或者为静态成员对象，不需要反复new
         */
        tradeService = new AlipayTradeServiceImpl.ClientBuilder().build();
    }

    private static final Logger logger = LoggerFactory.getLogger(OrderService.class);
	
	
	
	
	@Autowired
	OrdersMapper ordersMapper;
	@Autowired
	OrderitemMapper orderitemMapper;
	
	@Transactional  
	public void addOrder(Orders orders){
		
		List<Orderitem> orderItemList = orders.getOrderItemList();
		if(orderItemList.size()!=0){
			ordersMapper.insertSelective(orders);
			orderitemMapper.addOrderItemList(orders.getOrderItemList());
			
		}
		return;
	}
	
	public String findOrdertimeByOid(String oid){
		return ordersMapper.findOrdertimeByOid(oid);
	}

	public List<Orders> findOrder(String oid){
		return ordersMapper.selectByOid(oid);
	}

	public List<Orders> findOrderByUid(Integer uid) {
		return ordersMapper.findOrderByUid(uid);
	}

	public void delectOrder(String oid) {
		ordersMapper.deleteByPrimaryKey(oid);
	}
	
	public Orders findOrders(String oid) {
		return ordersMapper.selectByPrimaryKey(oid);
	}
	
	public int updateState(Orders orders){
		return ordersMapper.updateByPrimaryKeySelective(orders);
	}

	public List<Orders> findOrderByOid(String oid) {
		// TODO Auto-generated method stub
		return ordersMapper.selectByOid(oid);
	}
	
	/**
	 * 向支付宝发送支付请求
	 * @param path
	 * @param oid
	 * @return
	 */
	public Map<String, Object> pay(String path,String oid) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		Orders orders = ordersMapper.selectByPrimaryKey(oid);
		System.out.println(orders.getTotal());
		  // (必填) 商户网站订单系统中唯一订单号，64个字符以内，只能包含字母、数字、下划线，
        // 需保证商户系统端不能重复，建议通过数据库sequence生成，
        String outTradeNo = oid;

        // (必填) 订单标题，粗略描述用户的支付目的。如“xxx品牌xxx门店消费”
        String subject = new StringBuilder().append("美唯电器城支付宝扫码支付,订单号:").append(outTradeNo).toString();

        // (必填) 订单总金额，单位为元，不能超过1亿元
        // 如果同时传入了【打折金额】,【不可打折金额】,【订单总金额】三者,则必须满足如下条件:【订单总金额】=【打折金额】+【不可打折金额】
        String totalAmount = orders.getTotal().toString();

        // (必填) 付款条码，用户支付宝钱包手机app点击“付款”产生的付款条码
        String authCode = "用户自己的支付宝付款码"; // 条码示例，286648048691290423
        // (可选，根据需要决定是否使用) 订单可打折金额，可以配合商家平台配置折扣活动，如果订单部分商品参与打折，可以将部分商品总价填写至此字段，默认全部商品可打折
        // 如果该值未传入,但传入了【订单总金额】,【不可打折金额】 则该值默认为【订单总金额】- 【不可打折金额】
        //        String discountableAmount = "1.00"; //

        // (可选) 订单不可打折金额，可以配合商家平台配置折扣活动，如果酒水不参与打折，则将对应金额填写至此字段
        // 如果该值未传入,但传入了【订单总金额】,【打折金额】,则该值默认为【订单总金额】-【打折金额】
        String undiscountableAmount = "0.0";

        // 卖家支付宝账号ID，用于支持一个签约账号下支持打款到不同的收款账号，(打款到sellerId对应的支付宝账号)
        // 如果该字段为空，则默认为与支付宝签约的商户的PID，也就是appid对应的PID
        String sellerId = "";

        // 订单描述，可以对交易或商品进行一个详细地描述，比如填写"购买商品3件共20.00元"
        String body = new StringBuilder().append("订单").append(outTradeNo).append("购买商品共").append(totalAmount).append("元").toString();

        // 商户操作员编号，添加此参数可以为商户操作员做销售统计
        String operatorId = "test_operator_id";

        // (必填) 商户门店编号，通过门店号和商家后台可以配置精准到门店的折扣信息，详询支付宝技术支持
        String storeId = "test_store_id";

        // 业务扩展参数，目前可添加由支付宝分配的系统商编号(通过setSysServiceProviderId方法)，详情请咨询支付宝技术支持
        String providerId = "2088100200300400500";
        ExtendParams extendParams = new ExtendParams();
        extendParams.setSysServiceProviderId(providerId);

        // 支付超时，线下扫码交易定义为5分钟
        String timeoutExpress = "5m";

        // 商品明细列表，需填写购买商品详细信息，
        List<GoodsDetail> goodsDetailList = new ArrayList<GoodsDetail>();
        
        // 创建一个商品信息，参数含义分别为商品id（使用国标）、名称、单价（单位为分）、数量，如果需要添加商品类别，详见GoodsDetail
        GoodsDetail goods = GoodsDetail.newInstance("001", "美唯商品", 1000, 1);
        // 创建好一个商品后添加至商品明细列表
        goodsDetailList.add(goods);
        

        String appAuthToken = "应用授权令牌";//根据真实值填写

        // 创建条码支付请求builder，设置请求参数
        AlipayTradePrecreateRequestBuilder builder = new AlipayTradePrecreateRequestBuilder()
                .setSubject(subject).setTotalAmount(totalAmount).setOutTradeNo(outTradeNo)
                .setUndiscountableAmount(undiscountableAmount).setSellerId(sellerId).setBody(body)
                .setOperatorId(operatorId).setStoreId(storeId).setExtendParams(extendParams)
                .setTimeoutExpress(timeoutExpress)
                .setNotifyUrl("http://127.0.0.1:8081/MWShop/OrderController/alipay_callback")//支付宝服务器主动通知商户服务器里指定的页面http路径,根据需要设置
                .setGoodsDetailList(goodsDetailList);
        
        
        
        // 调用tradePay方法获取当面付应答
        AlipayF2FPrecreateResult result = tradeService.tradePrecreate(builder);
        switch (result.getTradeStatus()) {
        case SUCCESS:
            logger.info("支付宝预下单成功: )");
            System.out.println("下单成功！");
            orders.setState(2);
            ordersMapper.updateByPrimaryKeySelective(orders);
            AlipayTradePrecreateResponse response = result.getResponse();
            dumpResponse(response);

            File folder = new File(path);
            if(!folder.exists()){
                folder.setWritable(true);
                folder.mkdirs();
            }

            // 需要修改为运行机器上的路径
            //细节细节细节
            String filePath = String.format(path+"/qr-%s.png",response.getOutTradeNo());
            String fileName = String.format("qr-%s.png",response.getOutTradeNo());
            map.put("fileNamePath", fileName);
			map.put("filePath", filePath);
            ZxingUtils.getQRCodeImge(response.getQrCode(), 256, filePath);

   
        case FAILED:
        	logger.error("支付宝预下单失败!!!");
			break;

		case UNKNOWN:
			logger.error("系统异常，预下单状态未知!!!");
			break;

		default:
			logger.error("不支持的交易状态，交易返回异常!!!");
			break;
		}
        map.put("responseBody", result.getResponse().getBody());
        
		return map;
	}
	
	// 简单打印应答
    private void dumpResponse(AlipayResponse response) {
        if (response != null) {
            logger.info(String.format("code:%s, msg:%s", response.getCode(), response.getMsg()));
            if (StringUtils.isNotEmpty(response.getSubCode())) {
                logger.info(String.format("subCode:%s, subMsg:%s", response.getSubCode(),
                        response.getSubMsg()));
            }
            logger.info("body:" + response.getBody());
        }
    }
	
}
